service: chidori # NOTE: update this with your service name

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, dev}

custom:
  SiteName: chidori
  DomainName: medpassdev.com.br
  dnsStackName: dns
### Upload do Site para o S3   
  s3Sync:
    - bucketName: medpass-${self:custom.SiteName}-${self:provider.stage}
      localDir: build

plugins:
  - serverless-s3-sync
resources:
  Mappings:
    Region2S3WebsiteSuffix:
      us-east-1:
        Suffix: .s3-website-us-east-1.amazonaws.com
      us-west-1:
        Suffix: .s3-website-us-west-1.amazonaws.com
      us-west-2:
        Suffix: .s3-website-us-west-2.amazonaws.com
      eu-west-1:
        Suffix: .s3-website-eu-west-1.amazonaws.com
      ap-northeast-1:
        Suffix: .s3-website-ap-northeast-1.amazonaws.com
      ap-northeast-2:
        Suffix: .s3-website-ap-northeast-2.amazonaws.com
      ap-southeast-1:
        Suffix: .s3-website-ap-southeast-1.amazonaws.com
      ap-southeast-2:
        Suffix: .s3-website-ap-southeast-2.amazonaws.com
      ap-south-1:
        Suffix: .s3-website-ap-south-1.amazonaws.com
      us-east-2:
        Suffix: .s3-website-us-east-2.amazonaws.com
      sa-east-1:
        Suffix: .s3-website-sa-east-1.amazonaws.com
      cn-north-1:
        Suffix: .s3-website.cn-north-1.amazonaws.com.cn
      eu-central-1:
        Suffix: .s3-website.eu-central-1.amazonaws.com
  Resources:
# # ### Certificado ###
#     Certificate:
#       Type: AWS::CertificateManager::Certificate
#       Properties: 
#         DomainName: premed.medpass.com.br
#         DomainValidationOptions:
#           - DomainName: premed.medpass.com.br
#             ValidationDomain: medpass.com.br
### S3 ###
    S3BucketSite:
      Type: AWS::S3::Bucket
      Properties: 
        AccessControl: PublicRead
        BucketName: medpass-${self:custom.SiteName}-${self:provider.stage}
        VersioningConfiguration:
            Status: Enabled
        WebsiteConfiguration:
            IndexDocument: "index.html"
            ErrorDocument: "index.html"

    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketSite"
                    },
                    "/*"
                  ]
                ]

# ### Cloudfront ###
#     CloudFrontSiteAdmin:
#       Type: AWS::CloudFront::Distribution
#       DependsOn: S3BucketSite
#       Properties:
#         DistributionConfig: 
#           ViewerCertificate:
#             AcmCertificateArn: !Ref Certificate
#             SslSupportMethod: sni-only
#           Aliases:
#             - ${self:custom.SiteName}.${self:custom.DomainName}
#           DefaultCacheBehavior:
#             AllowedMethods:
#               - GET
#               - HEAD
#               - OPTIONS
#             CachedMethods:
#               - GET
#               - HEAD
#               - OPTIONS
#             ForwardedValues:
#               QueryString: 'false'
#             TargetOriginId: Origin-${self:custom.SiteName}.${self:custom.DomainName}
#             ViewerProtocolPolicy : redirect-to-https
#           Enabled: 'true'
#           HttpVersion: http2
#           IPV6Enabled: 'true'
#           Origins:
#             - DomainName: !Join ['', [!Ref 'S3BucketSite', !FindInMap [Region2S3WebsiteSuffix,
#                 !Ref 'AWS::Region', Suffix]]]
#               Id: Origin-${self:custom.SiteName}.${self:custom.DomainName}
#               CustomOriginConfig:
#                 OriginProtocolPolicy: http-only
#           PriceClass: PriceClass_All
